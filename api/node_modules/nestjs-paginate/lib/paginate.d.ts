import { Repository, SelectQueryBuilder, FindOperator, FindOptionsWhere } from 'typeorm';
import { PaginateQuery } from './decorator';
import { Column, RelationColumn, SortBy } from './helper';
export declare class Paginated<T> {
    data: T[];
    meta: {
        itemsPerPage: number;
        totalItems: number;
        currentPage: number;
        totalPages: number;
        sortBy: SortBy<T>;
        searchBy: Column<T>[];
        search: string;
        filter?: {
            [column: string]: string | string[];
        };
    };
    links: {
        first?: string;
        previous?: string;
        current: string;
        next?: string;
        last?: string;
    };
}
export interface PaginateConfig<T> {
    relations?: RelationColumn<T>[];
    sortableColumns: Column<T>[];
    searchableColumns?: Column<T>[];
    select?: Column<T>[];
    maxLimit?: number;
    defaultSortBy?: SortBy<T>;
    defaultLimit?: number;
    where?: FindOptionsWhere<T> | FindOptionsWhere<T>[];
    filterableColumns?: {
        [key in Column<T>]?: FilterOperator[];
    };
    withDeleted?: boolean;
}
export declare enum FilterOperator {
    EQ = "$eq",
    GT = "$gt",
    GTE = "$gte",
    IN = "$in",
    NULL = "$null",
    LT = "$lt",
    LTE = "$lte",
    BTW = "$btw",
    NOT = "$not"
}
export declare function isOperator(value: unknown): value is FilterOperator;
export declare const OperatorSymbolToFunction: Map<FilterOperator, (...args: any[]) => FindOperator<string>>;
export declare function getFilterTokens(raw: string): string[];
export declare function paginate<T>(query: PaginateQuery, repo: Repository<T> | SelectQueryBuilder<T>, config: PaginateConfig<T>): Promise<Paginated<T>>;
