"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const typeorm_1 = require("typeorm");
const paginate_1 = require("./paginate");
const common_1 = require("@nestjs/common");
const cat_entity_1 = require("./__tests__/cat.entity");
const cat_toy_entity_1 = require("./__tests__/cat-toy.entity");
const cat_home_entity_1 = require("./__tests__/cat-home.entity");
const lodash_1 = require("lodash");
describe('paginate', () => {
    let connection;
    let catRepo;
    let catToyRepo;
    let catHomeRepo;
    let cats;
    let catToys;
    let catHomes;
    beforeAll(async () => {
        connection = await (0, typeorm_1.createConnection)({
            type: 'sqlite',
            database: ':memory:',
            synchronize: true,
            logging: false,
            entities: [cat_entity_1.CatEntity, cat_toy_entity_1.CatToyEntity, cat_home_entity_1.CatHomeEntity],
        });
        catRepo = connection.getRepository(cat_entity_1.CatEntity);
        catToyRepo = connection.getRepository(cat_toy_entity_1.CatToyEntity);
        catHomeRepo = connection.getRepository(cat_home_entity_1.CatHomeEntity);
        cats = await catRepo.save([
            catRepo.create({ name: 'Milo', color: 'brown', age: 6 }),
            catRepo.create({ name: 'Garfield', color: 'ginger', age: 5 }),
            catRepo.create({ name: 'Shadow', color: 'black', age: 4 }),
            catRepo.create({ name: 'George', color: 'white', age: 3 }),
            catRepo.create({ name: 'Leche', color: 'white', age: null }),
        ]);
        catToys = await catToyRepo.save([
            catToyRepo.create({ name: 'Fuzzy Thing', cat: cats[0] }),
            catToyRepo.create({ name: 'Stuffed Mouse', cat: cats[0] }),
            catToyRepo.create({ name: 'Mouse', cat: cats[0] }),
            catToyRepo.create({ name: 'String', cat: cats[1] }),
        ]);
        catHomes = await catHomeRepo.save([
            catHomeRepo.create({ name: 'Box', cat: cats[0] }),
            catHomeRepo.create({ name: 'House', cat: cats[1] }),
        ]);
    });
    it('should return an instance of Paginated', async () => {
        const config = {
            sortableColumns: ['id'],
            defaultSortBy: [['id', 'ASC']],
            defaultLimit: 1,
        };
        const query = {
            path: '',
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result).toBeInstanceOf(paginate_1.Paginated);
        expect(result.data).toStrictEqual(cats.slice(0, 1));
    });
    it('should accept a query builder', async () => {
        const config = {
            sortableColumns: ['id'],
            defaultSortBy: [['id', 'ASC']],
            defaultLimit: 1,
        };
        const query = {
            path: '',
        };
        const queryBuilder = await catRepo.createQueryBuilder('cats');
        const result = await (0, paginate_1.paginate)(query, queryBuilder, config);
        expect(result.data).toStrictEqual(cats.slice(0, 1));
    });
    it('should accept a query builder with custom condition', async () => {
        const config = {
            sortableColumns: ['id'],
            defaultSortBy: [['id', 'ASC']],
            defaultLimit: 1,
        };
        const query = {
            path: '',
        };
        const queryBuilder = await connection
            .createQueryBuilder()
            .select('cats')
            .from(cat_entity_1.CatEntity, 'cats')
            .where('cats.color = :color', { color: 'white' });
        const result = await (0, paginate_1.paginate)(query, queryBuilder, config);
        expect(result.data).toStrictEqual(cats.slice(3, 4));
    });
    it('should default to page 1, if negative page is given', async () => {
        const config = {
            sortableColumns: ['id'],
            defaultLimit: 1,
        };
        const query = {
            path: '',
            page: -1,
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.meta.currentPage).toBe(1);
        expect(result.data).toStrictEqual(cats.slice(0, 1));
    });
    it('should default to limit maxLimit, if more than maxLimit is given', async () => {
        const config = {
            sortableColumns: ['id'],
            defaultLimit: 5,
            maxLimit: 2,
        };
        const query = {
            path: '',
            page: 1,
            limit: 20,
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.data).toStrictEqual(cats.slice(0, 2));
    });
    it('should return correct links for some results', async () => {
        const config = {
            sortableColumns: ['id'],
        };
        const query = {
            path: '',
            page: 2,
            limit: 2,
        };
        const { links } = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(links.first).toBe('?page=1&limit=2&sortBy=id:ASC');
        expect(links.previous).toBe('?page=1&limit=2&sortBy=id:ASC');
        expect(links.current).toBe('?page=2&limit=2&sortBy=id:ASC');
        expect(links.next).toBe('?page=3&limit=2&sortBy=id:ASC');
        expect(links.last).toBe('?page=3&limit=2&sortBy=id:ASC');
    });
    it('should return only current link if zero results', async () => {
        const config = {
            sortableColumns: ['id'],
            searchableColumns: ['name'],
        };
        const query = {
            path: '',
            page: 1,
            limit: 2,
            search: 'Pluto',
        };
        const { links } = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(links.first).toBe(undefined);
        expect(links.previous).toBe(undefined);
        expect(links.current).toBe('?page=1&limit=2&sortBy=id:ASC&search=Pluto');
        expect(links.next).toBe(undefined);
        expect(links.last).toBe(undefined);
    });
    it('should default to defaultSortBy if query sortBy does not exist', async () => {
        const config = {
            sortableColumns: ['id', 'createdAt'],
            defaultSortBy: [['id', 'DESC']],
        };
        const query = {
            path: '',
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.meta.sortBy).toStrictEqual([['id', 'DESC']]);
        expect(result.data).toStrictEqual(cats.slice(0).reverse());
    });
    it('should sort result by multiple columns', async () => {
        const config = {
            sortableColumns: ['name', 'color'],
        };
        const query = {
            path: '',
            sortBy: [
                ['color', 'DESC'],
                ['name', 'ASC'],
            ],
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.meta.sortBy).toStrictEqual([
            ['color', 'DESC'],
            ['name', 'ASC'],
        ]);
        expect(result.data).toStrictEqual([cats[3], cats[4], cats[1], cats[0], cats[2]]);
    });
    it('should return result based on search term', async () => {
        const config = {
            sortableColumns: ['id', 'name', 'color'],
            searchableColumns: ['name', 'color'],
        };
        const query = {
            path: '',
            search: 'i',
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.meta.search).toStrictEqual('i');
        expect(result.data).toStrictEqual([cats[0], cats[1], cats[3], cats[4]]);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&search=i');
    });
    it('should return result based on search term on many-to-one relation', async () => {
        const config = {
            relations: ['cat'],
            sortableColumns: ['id', 'name'],
            searchableColumns: ['name', 'cat.name'],
        };
        const query = {
            path: '',
            search: 'Milo',
        };
        const result = await (0, paginate_1.paginate)(query, catToyRepo, config);
        expect(result.meta.search).toStrictEqual('Milo');
        expect(result.data).toStrictEqual([catToys[0], catToys[1], catToys[2]]);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&search=Milo');
    });
    it('should return result based on search term on one-to-many relation', async () => {
        const config = {
            relations: ['toys'],
            sortableColumns: ['id', 'name'],
            searchableColumns: ['name', 'toys.name'],
        };
        const query = {
            path: '',
            search: 'Mouse',
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.meta.search).toStrictEqual('Mouse');
        const toy = (0, lodash_1.clone)(catToys[1]);
        delete toy.cat;
        const toy2 = (0, lodash_1.clone)(catToys[2]);
        delete toy2.cat;
        expect(result.data).toStrictEqual([Object.assign((0, lodash_1.clone)(cats[0]), { toys: [toy, toy2] })]);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&search=Mouse');
    });
    it('should return result based on search term on one-to-one relation', async () => {
        const config = {
            relations: ['cat'],
            sortableColumns: ['id', 'name', 'cat.id'],
        };
        const query = {
            path: '',
            sortBy: [['cat.id', 'DESC']],
        };
        const result = await (0, paginate_1.paginate)(query, catHomeRepo, config);
        expect(result.meta.sortBy).toStrictEqual([['cat.id', 'DESC']]);
        expect(result.data).toStrictEqual([catHomes[0], catHomes[1]].sort((a, b) => b.cat.id - a.cat.id));
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=cat.id:DESC');
    });
    it('should return result based on sort and search on many-to-one relation', async () => {
        const config = {
            relations: ['cat'],
            sortableColumns: ['id', 'name', 'cat.id'],
            searchableColumns: ['name', 'cat.name'],
        };
        const query = {
            path: '',
            sortBy: [['cat.id', 'DESC']],
            search: 'Milo',
        };
        const result = await (0, paginate_1.paginate)(query, catToyRepo, config);
        expect(result.meta.search).toStrictEqual('Milo');
        expect(result.data).toStrictEqual([catToys[0], catToys[1], catToys[2]].sort((a, b) => b.cat.id - a.cat.id));
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=cat.id:DESC&search=Milo');
    });
    it('should return result based on sort on one-to-many relation', async () => {
        const config = {
            relations: ['toys'],
            sortableColumns: ['id', 'name', 'toys.id'],
            searchableColumns: ['name', 'toys.name'],
        };
        const query = {
            path: '',
            sortBy: [['toys.id', 'DESC']],
            search: 'Mouse',
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.meta.search).toStrictEqual('Mouse');
        const toy1 = (0, lodash_1.clone)(catToys[1]);
        delete toy1.cat;
        const toy2 = (0, lodash_1.clone)(catToys[2]);
        delete toy2.cat;
        expect(result.data).toStrictEqual([Object.assign((0, lodash_1.clone)(cats[0]), { toys: [toy2, toy1] })]);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=toys.id:DESC&search=Mouse');
    });
    it('should return result based on sort on one-to-one relation', async () => {
        const config = {
            relations: ['cat'],
            sortableColumns: ['id', 'name'],
            searchableColumns: ['name', 'cat.name'],
        };
        const query = {
            path: '',
            search: 'Garfield',
        };
        const result = await (0, paginate_1.paginate)(query, catHomeRepo, config);
        expect(result.meta.search).toStrictEqual('Garfield');
        expect(result.data).toStrictEqual([catHomes[1]]);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&search=Garfield');
    });
    it('should return result based on search term and searchBy columns', async () => {
        const config = {
            sortableColumns: ['id', 'name', 'color'],
            searchableColumns: ['name', 'color'],
        };
        const searchTerm = 'white';
        const expectedResultData = cats.filter((cat) => cat.color === searchTerm);
        const query = {
            path: '',
            search: searchTerm,
            searchBy: ['color'],
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.meta.search).toStrictEqual(searchTerm);
        expect(result.meta.searchBy).toStrictEqual(['color']);
        expect(result.data).toStrictEqual(expectedResultData);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&search=white&searchBy=color');
    });
    it('should return result based on where config and filter', async () => {
        const config = {
            sortableColumns: ['id'],
            where: {
                color: 'white',
            },
            filterableColumns: {
                name: [paginate_1.FilterOperator.NOT],
            },
        };
        const query = {
            path: '',
            filter: {
                name: '$not:Leche',
            },
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.meta.filter).toStrictEqual({
            name: '$not:Leche',
        });
        expect(result.data).toStrictEqual([cats[3]]);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&filter.name=$not:Leche');
    });
    it('should return result based on filter on many-to-one relation', async () => {
        const config = {
            relations: ['cat'],
            sortableColumns: ['id', 'name'],
            filterableColumns: {
                'cat.name': [paginate_1.FilterOperator.NOT],
            },
        };
        const query = {
            path: '',
            filter: {
                'cat.name': '$not:Milo',
            },
        };
        const result = await (0, paginate_1.paginate)(query, catToyRepo, config);
        expect(result.meta.filter).toStrictEqual({
            'cat.name': '$not:Milo',
        });
        expect(result.data).toStrictEqual([catToys[3]]);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&filter.cat.name=$not:Milo');
    });
    it('should return result based on filter on one-to-many relation', async () => {
        const config = {
            relations: ['toys'],
            sortableColumns: ['id', 'name'],
            filterableColumns: {
                'toys.name': [paginate_1.FilterOperator.NOT],
            },
        };
        const query = {
            path: '',
            filter: {
                'toys.name': '$not:Stuffed Mouse',
            },
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        const cat1 = (0, lodash_1.clone)(cats[0]);
        const cat2 = (0, lodash_1.clone)(cats[1]);
        const catToys1 = (0, lodash_1.clone)(catToys[0]);
        const catToys2 = (0, lodash_1.clone)(catToys[2]);
        const catToys3 = (0, lodash_1.clone)(catToys[3]);
        delete catToys1.cat;
        delete catToys2.cat;
        delete catToys3.cat;
        cat1.toys = [catToys1, catToys2];
        cat2.toys = [catToys3];
        expect(result.meta.filter).toStrictEqual({
            'toys.name': '$not:Stuffed Mouse',
        });
        expect(result.data).toStrictEqual([cat1, cat2]);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&filter.toys.name=$not:Stuffed Mouse');
    });
    it('should return result based on filter on one-to-one relation', async () => {
        const config = {
            relations: ['cat'],
            sortableColumns: ['id', 'name'],
            filterableColumns: {
                'cat.name': [paginate_1.FilterOperator.NOT],
            },
        };
        const query = {
            path: '',
            filter: {
                'cat.name': '$not:Garfield',
            },
        };
        const result = await (0, paginate_1.paginate)(query, catHomeRepo, config);
        expect(result.meta.filter).toStrictEqual({
            'cat.name': '$not:Garfield',
        });
        expect(result.data).toStrictEqual([catHomes[0]]);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&filter.cat.name=$not:Garfield');
    });
    it('should return result based on $in filter on one-to-one relation', async () => {
        const config = {
            relations: ['cat'],
            sortableColumns: ['id', 'name'],
            filterableColumns: {
                'cat.age': [paginate_1.FilterOperator.IN],
            },
        };
        const query = {
            path: '',
            filter: {
                'cat.age': '$in:4,6',
            },
        };
        const result = await (0, paginate_1.paginate)(query, catHomeRepo, config);
        expect(result.meta.filter).toStrictEqual({
            'cat.age': '$in:4,6',
        });
        expect(result.data).toStrictEqual([catHomes[0]]);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&filter.cat.age=$in:4,6');
    });
    it('should return result based on $btw filter on one-to-one relation', async () => {
        const config = {
            relations: ['cat'],
            sortableColumns: ['id', 'name'],
            filterableColumns: {
                createdAt: [paginate_1.FilterOperator.BTW],
            },
        };
        const query = {
            path: '',
            filter: {
                'cat.age': '$btw:6,10',
            },
        };
        const result = await (0, paginate_1.paginate)(query, catHomeRepo, config);
        expect(result.meta.filter).toStrictEqual({
            'cat.age': '$btw:6,10',
        });
        expect(result.data).toStrictEqual([catHomes[0], catHomes[1]]);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&filter.cat.age=$btw:6,10');
    });
    it('should return result based on where array and filter', async () => {
        const config = {
            sortableColumns: ['id'],
            where: [
                {
                    color: 'white',
                },
                {
                    age: 4,
                },
            ],
            filterableColumns: {
                name: [paginate_1.FilterOperator.NOT],
            },
        };
        const query = {
            path: '',
            filter: {
                name: '$not:Leche',
            },
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.meta.filter).toStrictEqual({
            name: '$not:Leche',
        });
        expect(result.data).toStrictEqual([cats[2], cats[3]]);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&filter.name=$not:Leche');
    });
    it('should return result based on multiple filter', async () => {
        const config = {
            sortableColumns: ['id'],
            filterableColumns: {
                name: [paginate_1.FilterOperator.NOT],
                color: [paginate_1.FilterOperator.EQ],
            },
        };
        const query = {
            path: '',
            filter: {
                name: '$not:Leche',
                color: 'white',
            },
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.meta.filter).toStrictEqual({
            name: '$not:Leche',
            color: 'white',
        });
        expect(result.data).toStrictEqual([cats[3]]);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&filter.name=$not:Leche&filter.color=white');
    });
    it('should return result based on filter and search term', async () => {
        const config = {
            sortableColumns: ['id'],
            searchableColumns: ['name', 'color'],
            filterableColumns: {
                id: [paginate_1.FilterOperator.NOT, paginate_1.FilterOperator.IN],
            },
        };
        const query = {
            path: '',
            search: 'white',
            filter: {
                id: '$not:$in:1,2,5',
            },
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.meta.search).toStrictEqual('white');
        expect(result.meta.filter).toStrictEqual({ id: '$not:$in:1,2,5' });
        expect(result.data).toStrictEqual([cats[3]]);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&search=white&filter.id=$not:$in:1,2,5');
    });
    it('should return result based on filter and where config', async () => {
        const config = {
            sortableColumns: ['id'],
            where: {
                color: (0, typeorm_1.In)(['black', 'white']),
            },
            filterableColumns: {
                id: [paginate_1.FilterOperator.NOT, paginate_1.FilterOperator.IN],
            },
        };
        const query = {
            path: '',
            filter: {
                id: '$not:$in:1,2,5',
            },
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.data).toStrictEqual([cats[2], cats[3]]);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&filter.id=$not:$in:1,2,5');
    });
    it('should return result based on range filter', async () => {
        const config = {
            sortableColumns: ['id'],
            filterableColumns: {
                age: [paginate_1.FilterOperator.GTE],
            },
        };
        const query = {
            path: '',
            filter: {
                age: '$gte:4',
            },
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.data).toStrictEqual([cats[0], cats[1], cats[2]]);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&filter.age=$gte:4');
    });
    it('should return result based on between range filter', async () => {
        const config = {
            sortableColumns: ['id'],
            filterableColumns: {
                age: [paginate_1.FilterOperator.BTW],
            },
        };
        const query = {
            path: '',
            filter: {
                age: '$btw:4,5',
            },
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.data).toStrictEqual([cats[1], cats[2]]);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&filter.age=$btw:4,5');
    });
    it('should return result based on is null query', async () => {
        const config = {
            sortableColumns: ['id'],
            filterableColumns: {
                age: [paginate_1.FilterOperator.NULL],
            },
        };
        const query = {
            path: '',
            filter: {
                age: '$null',
            },
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.data).toStrictEqual([cats[4]]);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&filter.age=$null');
    });
    it('should return result based on not null query', async () => {
        const config = {
            sortableColumns: ['id'],
            filterableColumns: {
                age: [paginate_1.FilterOperator.NOT, paginate_1.FilterOperator.NULL],
            },
        };
        const query = {
            path: '',
            filter: {
                age: '$not:$null',
            },
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.data).toStrictEqual([cats[0], cats[1], cats[2], cats[3]]);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&filter.age=$not:$null');
    });
    it('should ignore filterable column which is not configured', async () => {
        const config = {
            sortableColumns: ['id'],
            filterableColumns: {
                name: [paginate_1.FilterOperator.NOT, paginate_1.FilterOperator.NULL],
            },
        };
        const query = {
            path: '',
            filter: {
                age: '$not:$null',
            },
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.data).toStrictEqual(cats);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&filter.age=$not:$null');
    });
    it('should ignore filter operator which is not configured', async () => {
        const config = {
            sortableColumns: ['id'],
            filterableColumns: {
                age: [paginate_1.FilterOperator.NOT],
            },
        };
        const query = {
            path: '',
            filter: {
                age: '$not:$null',
            },
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.data).toStrictEqual(cats);
        expect(result.links.current).toBe('?page=1&limit=20&sortBy=id:ASC&filter.age=$not:$null');
    });
    it('should throw an error when no sortableColumns', async () => {
        const config = {
            sortableColumns: [],
        };
        const query = {
            path: '',
        };
        try {
            await (0, paginate_1.paginate)(query, catRepo, config);
        }
        catch (err) {
            expect(err).toBeInstanceOf(common_1.HttpException);
        }
    });
    it.each([
        { operator: '$eq', result: true },
        { operator: '$gte', result: true },
        { operator: '$gt', result: true },
        { operator: '$in', result: true },
        { operator: '$null', result: true },
        { operator: '$lt', result: true },
        { operator: '$lte', result: true },
        { operator: '$btw', result: true },
        { operator: '$not', result: true },
        { operator: '$fake', result: false },
    ])('should check operator "$operator" valid is $result', ({ operator, result }) => {
        expect((0, paginate_1.isOperator)(operator)).toStrictEqual(result);
    });
    it.each([
        { operator: '$eq', name: 'Equal' },
        { operator: '$gt', name: 'MoreThan' },
        { operator: '$gte', name: 'MoreThanOrEqual' },
        { operator: '$in', name: 'In' },
        { operator: '$null', name: 'IsNull' },
        { operator: '$lt', name: 'LessThan' },
        { operator: '$lte', name: 'LessThanOrEqual' },
        { operator: '$btw', name: 'Between' },
        { operator: '$not', name: 'Not' },
    ])('should get operator function $name for "$operator"', ({ operator, name }) => {
        const func = paginate_1.OperatorSymbolToFunction.get(operator);
        expect(func.name).toStrictEqual(name);
    });
    it.each([
        { string: '$eq:value', tokens: [null, '$eq', 'value'] },
        { string: '$eq:val:ue', tokens: [null, '$eq', 'val:ue'] },
        { string: '$in:value1,value2,value3', tokens: [null, '$in', 'value1,value2,value3'] },
        { string: '$not:$in:value1:a,value2:b,value3:c', tokens: ['$not', '$in', 'value1:a,value2:b,value3:c'] },
        { string: 'value', tokens: [null, '$eq', 'value'] },
        { string: 'val:ue', tokens: [null, '$eq', 'val:ue'] },
        { string: '$not:value', tokens: [null, '$not', 'value'] },
        { string: '$eq:$not:value', tokens: ['$eq', '$not', 'value'] },
        { string: '$eq:$null', tokens: ['$eq', '$null'] },
        { string: '$null', tokens: [null, '$null'] },
        { string: '', tokens: [null, '$eq', ''] },
        { string: '$eq:$not:$in:value', tokens: [] },
    ])('should get filter tokens for "$string"', ({ string, tokens }) => {
        expect((0, paginate_1.getFilterTokens)(string)).toStrictEqual(tokens);
    });
    it('should return all items even if deleted', async () => {
        const config = {
            sortableColumns: ['id'],
            withDeleted: true,
        };
        const query = {
            path: '',
        };
        await catRepo.softDelete({ id: cats[0].id });
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.meta.totalItems).toBe(cats.length);
    });
    it('should return only undeleted items', async () => {
        const config = {
            sortableColumns: ['id'],
            withDeleted: false,
        };
        const query = {
            path: '',
        };
        await catRepo.softDelete({ id: cats[0].id });
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        expect(result.meta.totalItems).toBe(cats.length - 1);
    });
    it('should return the specified columns only', async () => {
        const config = {
            sortableColumns: ['id'],
            select: ['id', 'name'],
        };
        const query = {
            path: '',
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        result.data.forEach((cat) => {
            expect(cat.color).not.toBeDefined();
        });
    });
    it('should return the specified relationship columns only', async () => {
        const config = {
            sortableColumns: ['name'],
            select: ['id', 'name', 'toys.name'],
            relations: ['toys'],
        };
        const query = {
            path: '',
        };
        const result = await (0, paginate_1.paginate)(query, catRepo, config);
        result.data.forEach((cat) => {
            expect(cat.id).toBeDefined();
            expect(cat.name).toBeDefined();
            expect(cat.color).not.toBeDefined();
            cat.toys.map((toy) => {
                expect(toy.name).toBeDefined();
                expect(toy.id).not.toBeDefined();
            });
        });
    });
});
//# sourceMappingURL=paginate.spec.js.map